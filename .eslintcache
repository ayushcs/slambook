[{"F:\\Projects\\slambook\\src\\index.js":"1","F:\\Projects\\slambook\\src\\SlamBook.js":"2","F:\\Projects\\slambook\\src\\reportWebVitals.js":"3","F:\\Projects\\slambook\\src\\component\\ViewSlamBook.js":"4","F:\\Projects\\slambook\\src\\component\\SlambookCreate.js":"5","F:\\Projects\\slambook\\src\\component\\FrontPage.js":"6","F:\\Projects\\slambook\\src\\component\\FillSlamBook.js":"7","F:\\Projects\\slambook\\src\\component\\ViewSlams.js":"8","F:\\Projects\\slambook\\src\\component\\ViewForm.js":"9"},{"size":618,"mtime":1612028074571,"results":"10","hashOfConfig":"11"},{"size":1273,"mtime":1612028074543,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":2335,"mtime":1612028074564,"results":"14","hashOfConfig":"11"},{"size":11947,"mtime":1612028074563,"results":"15","hashOfConfig":"11"},{"size":1464,"mtime":1612028074562,"results":"16","hashOfConfig":"11"},{"size":4981,"mtime":1612028074561,"results":"17","hashOfConfig":"11"},{"size":1556,"mtime":1612028074565,"results":"18","hashOfConfig":"11"},{"size":3920,"mtime":1612028074564,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"wgcsob",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"F:\\Projects\\slambook\\src\\index.js",[],["41","42"],"F:\\Projects\\slambook\\src\\SlamBook.js",[],"F:\\Projects\\slambook\\src\\reportWebVitals.js",[],"F:\\Projects\\slambook\\src\\component\\ViewSlamBook.js",[],"F:\\Projects\\slambook\\src\\component\\SlambookCreate.js",["43"],"import React from 'react';\r\nimport {TextField, Dialog,LinearProgress, Button,FormGroup,FormControlLabel,Checkbox }from '@material-ui/core/';\r\nclass SlambookCreate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data : [\r\n                {\r\n                    id: 0,\r\n                    question: \"My name in your phone_______ ?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 1,\r\n                    question: \"My name in your phone_______ ?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 2,\r\n                    question: \"Relation between you and me______?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 3,\r\n                    question: \"Something You like in me______?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 4,\r\n                    question: \"Something you hate in me_____?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 5,\r\n                    question: \"Words about me\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 6,\r\n                    question: \"What would be your reaction if i die_______?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 7,\r\n                    question: \"What did you feel when you first saw me______?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 8,\r\n                    question: \"A message for me_____?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 9,\r\n                    question: \"A nick name for me_______?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 10,\r\n                    question: \"A song you want to dedicate me_________?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 11,\r\n                    question: \"You do want me to put this as my status_____?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 12,\r\n                    question: \"Who is your secret crush?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 13,\r\n                    question: \"Who would you most like to talk to?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 14,\r\n                    question: \"Worst mistake?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 15,\r\n                    question: \"Worst thing that ever happened to you?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 16,\r\n                    question: \"Your dream?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 17,\r\n                    question: \"Your favorite actor or actress and why?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 18,\r\n                    question: \"What lie have you told that hurt someone?\",\r\n                    added:false\r\n                },\r\n                {\r\n                    id: 19,\r\n                    question: \"What is the most expensive thing you have stolen?\",\r\n                    added:false\r\n                },\r\n            ],\r\n            disableProceedButton:true,\r\n            proceedModal: false,\r\n            loader:false,\r\n            generatedLink:false,\r\n            isCopied:false,\r\n            error:null\r\n        }\r\n    }\r\n\r\n    createNewList(d,event){\r\n        let arr = this.state.data;\r\n        let pos = parseInt(event.target.value);\r\n        let disableProceedButton = this.state.disableProceedButton; \r\n        if(event.target.checked){\r\n            arr[pos][\"added\"] = event.target.checked;\r\n        }else{\r\n            arr[pos][\"added\"] = event.target.checked;\r\n        }\r\n        disableProceedButton = arr.some(function(e) {\r\n            return e.added == true;\r\n        });\r\n        this.setState({data:arr,disableProceedButton : !disableProceedButton});\r\n    }\r\n\r\n\r\n    proceedNext(event){\r\n        if(this.state.disableProceedButton){\r\n            alert(\"Please select at least one to Proceed !!\")\r\n        }else{\r\n            this.setState({proceedModal:true})\r\n        }\r\n    }\r\n\r\n    copyLink(event){\r\n        event.preventDefault();\r\n        var copyText = document.getElementById(\"shareableLink\");\r\n        copyText.select();\r\n        copyText.setSelectionRange(0, 99999)\r\n        document.execCommand(\"copy\");\r\n        this.setState({isCopied:true})\r\n        \r\n        setTimeout(()=>{\r\n            this.props.history.push(`/`)\r\n        },1500)  \r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        let error = this.state.error\r\n        let uName = document.getElementById('uName').value;\r\n        let pwd = document.getElementById('pwd').value;\r\n        if(uName && pwd){\r\n            this.setState({loader:true})\r\n            //DEMO CODE Please remove during production setup\r\n            setTimeout(()=>{\r\n                this.setState({loader:false, generatedLink:\"https://demo.com/xyz\"})\r\n            },3000)    \r\n        }else{\r\n            error = \"Please create a UserName/Password\";\r\n            this.setState({error})\r\n        }\r\n    }\r\n\r\n    render() { \r\n        const { data,disableProceedButton,proceedModal,loader,generatedLink,isCopied,error } = this.state;\r\n        return (  \r\n            <div className=\"container-fluid\"> \r\n                <div className=\"row\">\r\n                    <div className=\"col-12 px-0 position-fixed text-center toplabel\">\r\n                        <p className=\"col-12 mt-2\">Create Your own SlamBook</p>\r\n                    </div>\r\n                    <div className=\"mainimage position-fixed\" style={{opacity: \"0.2\",zIndex:\"-1\"}}></div>\r\n                </div>\r\n                <div className=\"p-2 mt-5\">\r\n                    <FormGroup aria-label=\"position\" row>\r\n                    {\r\n                        (data)\r\n                        ?\r\n                            data.map((d,i)=>{\r\n                                return(\r\n                                    <div className=\"row w-100\">\r\n                                        <div className=\"col-12 px-0\">\r\n                                        <FormControlLabel\r\n                                            value={d.id}\r\n                                            control={<Checkbox color=\"primary\" onClick={this.createNewList.bind(this,d)} />}\r\n                                            label={d.question}\r\n                                            labelPlacement=\"end\"\r\n                                        />\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        :\r\n                        null\r\n                    }\r\n                    </FormGroup>\r\n                    <Button disabled={disableProceedButton} onClick={this.proceedNext.bind(this)} variant=\"contained\" color=\"secondary\" className=\"w-100 mt-2 mb-4 p-2\">\r\n                    <span className=\"h1\">Proceed</span>\r\n                </Button>\r\n                </div>\r\n                {/* Dialog Start from here */}\r\n                <Dialog maxWidth=\"md\" onClose={()=>this.setState({proceedModal:false,generatedLink:false})} aria-labelledby=\"proceed-to-share\" open={proceedModal}>\r\n                {\r\n                (generatedLink)?\r\n                <div className=\"row m-auto\">\r\n                    <div class=\"alert alert-success\" role=\"alert\">\r\n                        <h4 class=\"alert-heading\">Hurrey! Link Generated</h4>\r\n                        <p>\r\n                            Click on Copy and share with your colleagues.\r\n                        </p>\r\n                    </div>\r\n                    <input type=\"text\" id=\"shareableLink\" className=\"d-none\" value={generatedLink} />\r\n                    <span className=\"h2\">{generatedLink}</span>\r\n                    <div className=\" mt-3\">\r\n                        <div className=\"m-auto col-12\">\r\n                            <Button onClick={this.copyLink.bind(this)} variant=\"contained\" color=\"primary\" className=\"w-100 mt-2 mb-4 p-2\">\r\n                                {\r\n                                (isCopied)\r\n                                ?\r\n                                <span className=\"text-center w-100 m-2 p-2\">\r\n                                    Link Copied</span>\r\n                                :\r\n                                <span className=\"h2\">Copy Link</span>\r\n                                }\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className=\"row m-auto\">\r\n                    <div class=\"alert alert-success\" role=\"alert\">\r\n                        <h4 class=\"alert-heading\">Final Step</h4>\r\n                        <p>\r\n                            Create a new UserName & Password. to view all your SLAMBOOK from next time. \r\n                        </p>\r\n                    </div>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <div className=\"mt-3\">\r\n                            <div className=\"m-auto col-12\">\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth=\"true\"\r\n                                    id=\"uName\"\r\n                                    label=\"Username\"\r\n                                    variant=\"filled\"\r\n                                    type=\"text\"\r\n                                    className=\"col-12\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\" mt-3\">\r\n                            <div className=\"m-auto col-12\">\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth=\"true\"\r\n                                    id=\"pwd\"\r\n                                    label=\"Password\"\r\n                                    variant=\"filled\"\r\n                                    type=\"password\"\r\n                                    className=\"w-100\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        {(error)?<span className=\"text-danger p-2 px-0\">{error}</span>:null}\r\n                        <div className=\" mt-3\">\r\n                            <div className=\"m-auto col-12\">\r\n                                <Button type=\"submit\" onClick={this.handleSubmit.bind(this)} variant=\"contained\" color=\"primary\" className=\"w-100 mt-2 mb-4 p-2\">\r\n                                    {\r\n                                    (loader)\r\n                                    ?\r\n                                    <span className=\"text-center w-100 m-2 p-2\">\r\n                                        Generating\r\n                                    <LinearProgress color=\"secondary\" /></span>\r\n                                    :\r\n                                    <span className=\"h2\">Generate Link</span>\r\n                                    }\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                }\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SlambookCreate;","F:\\Projects\\slambook\\src\\component\\FrontPage.js",[],"F:\\Projects\\slambook\\src\\component\\FillSlamBook.js",[],"F:\\Projects\\slambook\\src\\component\\ViewSlams.js",[],"F:\\Projects\\slambook\\src\\component\\ViewForm.js",["44","45"],"import React from 'react'\r\nimport {TextField, Button} from '@material-ui/core/';\r\n\r\n\r\nclass ViewForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data : [\r\n                {\r\n                    'someUniqueId' : [{\r\n                        id: 0,\r\n                        question: \"My name in your phone_______ ?\",\r\n                        answer: 'Ayush'\r\n                    },\r\n                    {\r\n                        id: 1,\r\n                        question: \"My name in your phone_______ ?\",\r\n                        answer: 'Aking'\r\n                    }]\r\n                },\r\n                {\r\n                    'someUniqueId2' : [{\r\n                        id: 0,\r\n                        question: \"My name in your phone_______ ?\",\r\n                        answer: 'Nihal'\r\n                    },\r\n                    {\r\n                        id: 1,\r\n                        question: \"My name in your phone_______ ?\",\r\n                        answer: 'Abhishek'\r\n                    }]\r\n                }\r\n            ],\r\n            curData:'someUniqueId'\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            let curData;\r\n            if (this.props.match.params.formid) {\r\n                curData = this.props.match.params.formid.split('=')[1];\r\n                this.setState({curData: curData});\r\n            }\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            \r\n            <div className=\"container-fluid\">\r\n                {this.state.curData != '' ?\r\n                    <div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 px-0 position-fixed text-center toplabel\">\r\n                                <Button className=\"col-12\">Create Your Own SlamBook Now</Button>\r\n                            </div>\r\n                            <div className=\"mainimage position-fixed\" style={{opacity: \"0.2\"}}></div>\r\n                        </div>\r\n                        <div className=\"row mt-3 pt-4\">\r\n                            <div className=\"col-12\">\r\n                                {/* {this.state.data.map((value, index) => {\r\n                                        return (\r\n                                            <div key={index}>\r\n                                                <div key={\"q_\" + index} className=\"row mt-2\">\r\n                                                    <div key={\"q_t\" + index} className=\"col-12 questions\">\r\n                                                        {(index+ 1) + ') ' + value[this.state.curData].question}\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div key={\"a\" + index} className=\"row\">\r\n                                                    <div key={\"a_t\" + index} className=\"col-12\">\r\n                                                        <TextField id={\"question\"+ value[this.state.curData].id} label=\"Your Answer\" data-id={value[this.state.curData].id}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                })} */}\r\n                            </div>\r\n                            <div className=\"row mt-4 mb-3\">\r\n                                <div className=\"m-auto col-10 col-sm-4\">\r\n                                    <Button variant=\"contained\" color=\"secondary\" className=\"col-12\">Submit</Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ViewForm;",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":128,"column":28,"nodeType":"52","messageId":"53","endLine":128,"endColumn":30},{"ruleId":"54","severity":1,"message":"55","line":2,"column":9,"nodeType":"56","messageId":"57","endLine":2,"endColumn":18},{"ruleId":"50","severity":1,"message":"58","line":55,"column":37,"nodeType":"52","messageId":"53","endLine":55,"endColumn":39},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]